generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Org {
  id         String       @id
  slug       String       @unique
  name       String
  status     orgStatus    @default(ACTIVE)
  orgUser    OrgUser[]
  Invitation Invitation[]
}

model OrgUser {
  userId      String
  orgId       String
  role        OrgRole
  dateCreated DateTime @default(now())
  Org         Org      @relation(fields: [orgId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, orgId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  account       Account?
  orgUser       OrgUser[]
  session       Session[]
  Invitation    Invitation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id        String           @id @default(cuid())
  org       Org              @relation(fields: [orgId], references: [id])
  invitedBy User             @relation(fields: [invitedByUserId], references: [id])
  email     String
  invitedOn DateTime         @default(now())
  status    invitationStatus @default(PENDING)
  role      OrgRole          @default(USER)
  message   String

  orgId           String
  invitedByUserId String
}

enum OrgRole {
  USER
  MANAGER
  ADMIN
}

enum orgStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum invitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}
